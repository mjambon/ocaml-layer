#! /usr/bin/env bash
#
# Put together a Dockerfile from options specified on the command line.
# From https://github.com/mjambon/setup-ocaml
#
set -eu -o pipefail

default_cmd='bash'
default_os=alpine
default_extra_packages=''
default_opam_packages='dune'
default_opam_switch='4.12.0'
default_opam_switch_options=''

usage() {
  cat <<EOF
Put together a sample Dockerfile for setting up an OCaml build environment.
This is intended for building a base image that will be used for automatic
building and testing purposes.

Usage: $(basename "$0") [OPTIONS]
Options:
  --cmd CMD
      Set the 'CMD' line to this instead of the default command.
      See also '--no-cmd'.
      Default: '$default_cmd'.
  --from NAME
      Base Docker image to use. This will be used as is for the FROM line
      of the Dockerfile. See also '--no-from'.
      Default: derived from the value of the '--os' option.
  --create-user USER
      Create the specified non-privileged user account and switch to it.
      The current user must be 'root'.
      Default: stay as the current user.
  --extra-packages PKG1,PKG2,PKG3
      A comma-separated or whitespace-separated list of package names to
      be installed with the native package manager.
  --force-tag TAG
      Force a full rebuild if the TAG is different from the last one used.
      This produces a dummy RUN command at the beginning of the dockerfile,
      forcing docker to rebuild the subsequent layers unless this tag
      isn't new.
  --help
      Print this help message and exit.
  --no-cmd
      Don't produce a 'CMD' line. This allows concatenating the output with
      other dockerfile commands.
  --no-from
      Don't produce a 'FROM' line. This allows concatenating the output with
      other dockerfile commands.
  -o DOCKERFILE
      Write the resulting docker file to this file instead of standard output.
  --opam-packages PKG1,PKG2,PKG3
      A comma-separated or whitespace-separated list of opam package names,
      optionally with a version suffix. For example, 'foo.1.2.3' will
      specifically install version '1.2.3' of the 'foo' package.
  --opam-switch SWITCH
      This specifies which version of OCaml to use, optionally with
      some special setup. Run 'opam switch list-available' to see the choices.
      Default, subject to change: '$default_opam_switch'.
  --opam-switch-options OPTIONS
      Experimental. Allows passing extra arguments to the
      'opam switch create SWITCH' command. The OPTIONS string will be split
      on whitespace. It is intended for creating custom switches using
      the '--packages' option of 'opam switch create'.
      Default: '$default_opam_switch_options'
  --os OS
      Specify the container's OS family. Currently, the choices are
      'alpine' or 'ubuntu'. 'alpine' is recommended for building
      statically-linked executables.
      Default: '$default_os'.
EOF
}

# Usage: error "something went wrong"
error() {
  echo "Error: $*" >&2
  exit 1
}

os="$default_os"
cmd="$default_cmd"
no_cmd=false
from=''
no_from=false
create_user=''
dockerfile=''
extra_packages="$default_extra_packages"
force_tag=''
opam_packages="$default_opam_packages"
opam_switch="$default_opam_switch"
opam_switch_options="$default_opam_switch_options"

# The commands like '$(echo $...)' are for squashing multiline input into
# a single line, for compatibility with dockerfile syntax. At the time
# of writing the dockerfiles, certains things like lists of packages will
# be formatted as multiple lines regardless.
#
while [[ $# -gt 0 ]]; do
  case "$1" in
    --cmd)
      cmd=$(echo $2)
      shift
    ;;
    --from)
      from=$(echo $2)
      shift
    ;;
    --create-user)
      create_user=$(echo $2)
      shift
    ;;
    --extra-packages)
      extra_packages=$(echo $2)
      shift
    ;;
    --force-tag)
      force_tag=$(echo $2)
      shift
    ;;
    --help)
      usage
      exit 0
    ;;
    --no-cmd)
      no_cmd=true
      ;;
    --no-from)
      no_from=true
      ;;
    -o)
      dockerfile=$2
      shift
    ;;
    --opam-packages)
      opam_packages=$(echo $2)
      shift
    ;;
    --opam-switch)
      opam_switch=$(echo $2)
      shift
    ;;
    --opam-switch-options)
      opam_switch_options=$(echo $2)
      shift
    ;;
    --os)
      os=$2
      case "$os" in
        alpine|ubuntu)
          ;;
        *)
          error "Unsupported value for --os: '$os'"
      esac
      shift
    ;;
    *)
      error "Unrecognized command line argument: '$1'"
  esac
  shift
done

if [[ -z "$from" ]]; then
  case "$os" in
    alpine)
      from="alpine"
      ;;
    ubuntu)
      from="ubuntu"
      ;;
    *)
      error "Cannot derive 'FROM' field from OS value '$os'. Try '--from'."
  esac
fi

# Print one argument per line, ending each line except the last by a backslash.
#
multiline() {
  while [[ $# -gt 1 ]]; do
    echo "$1"' \'
    echo -n "  "
    shift
  done
  if [[ $# = 1 ]]; then
    echo "$1"
  fi
}

print_create_user() {
  case "$create_user" in
    '')
      echo
      ;;
    root)
      cat <<EOF
USER root
WORKDIR /root
EOF
      ;;
    *)
    cat <<EOF
COPY os/$os/create-user .ocaml-setup/os/create-user
RUN ./.ocaml-setup/os/create-user $create_user
USER $create_user
WORKDIR /home/$create_user
EOF
  esac
}

if [[ -n "$dockerfile" ]]; then
  exec > "$dockerfile"
fi

cat <<EOF
# Dockerfile generated by '$0 $*'
#
# This sets up a build environment for OCaml.
# Provided by https://github.com/mjambon/setup-ocaml
#
$([[ "$no_from" = true ]] || echo "FROM $from")

# Force a rebuild when the following line changes.
RUN echo "$force_tag"

COPY os/$os/setup .ocaml-setup/os/setup

RUN $(multiline ./.ocaml-setup/os/setup $extra_packages)

$(print_create_user)
COPY opam/install-ocaml .ocaml-setup/opam/install-ocaml
RUN ./.ocaml-setup/opam/install-ocaml '$opam_switch' $opam_switch_options

COPY opam/install-opam-packages .ocaml-setup/opam/install-opam-packages
RUN $(multiline ./.ocaml-setup/opam/install-opam-packages $opam_packages)
$([[ "$no_cmd" = true ]] || (echo; echo "CMD $cmd") )

COPY Dockerfile /Dockerfile
EOF
